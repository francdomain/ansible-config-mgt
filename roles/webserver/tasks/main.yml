# # tasks file for webserver
# ---
# - name: install apache
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.yum:
#     name: "httpd"
#     state: present

# - name: Enable apache
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.command:
#     cmd: sudo systemctl enable httpd

# - name: Install EPEL release
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.command:
#     cmd: sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm -y

# - name: Install dnf-utils and Remi repository
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.command:
#     cmd: sudo dnf install dnf-utils http://rpms.remirepo.net/enterprise/remi-release-9.rpm -y

# - name: Reset PHP module
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.command:
#     cmd: sudo dnf module reset php -y

# # - name: Enable PHP 8.2 module
# - name: Enable PHP 7.4 module
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.command:
#     cmd: sudo dnf module enable php:remi-7.4 -y

# - name: Install PHP and extensions
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.yum:
#     name:
#       - php
#       - php-opcache
#       - php-gd
#       - php-curl
#       - php-mysqlnd
#     state: present

# - name: Install MySQL client
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.yum:
#     name: "mysql"
#     state: present

# - name: Start PHP-FPM service
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.service:
#     name: php-fpm
#     state: started

# - name: Enable PHP-FPM service
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.service:
#     name: php-fpm
#     enabled: true

# - name: Set SELinux policies for web servers
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.command:
#     cmd: sudo setsebool -P httpd_execmem 1
#     cmd: sudo setsebool -P httpd_can_network_connect=1
#     cmd: sudo setsebool -P httpd_can_network_connect_db=1

# - name: install git
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.yum:
#     name: "git"
#     state: present

# - name: clone a repo
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.git:
#     repo: https://github.com/francdomain/tooling.git
#     dest: /var/www/html
#     force: yes

# - name: copy html content to one level up
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   command: cp -r /var/www/html/html/ /var/www/

# - name: Start service httpd, if not started
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.service:
#     name: httpd
#     state: started

# - name: recursively remove /var/www/html/html/ directory
#   remote_user: ec2-user
#   become: true
#   become_user: root
#   ansible.builtin.file:
#     path: /var/www/html/html
#     state: absent


---
# Install Apache
- name: Install Apache
  remote_user: ec2-user
  become: true
  ansible.builtin.yum:
    name: httpd
    state: present

# Install EPEL release
- name: Install EPEL release
  remote_user: ec2-user
  become: true
  ansible.builtin.yum:
    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
    state: present

# Install dnf-utils and Remi repository
- name: Install dnf-utils and Remi repository
  remote_user: ec2-user
  become: true
  ansible.builtin.yum:
    name:
      - dnf-utils
      - http://rpms.remirepo.net/enterprise/remi-release-9.rpm
    state: present

# Reset PHP module
- name: Reset PHP module
  remote_user: ec2-user
  become: true
  ansible.builtin.command:
    cmd: dnf module reset php -y

# Enable PHP 7.4 module
- name: Enable PHP 7.4 module
  remote_user: ec2-user
  become: true
  ansible.builtin.command:
    cmd: dnf module enable php:remi-7.4 -y

# Install PHP and extensions
- name: Install PHP and extensions
  remote_user: ec2-user
  become: true
  ansible.builtin.yum:
    name:
      - php
      - php-opcache
      - php-gd
      - php-curl
      - php-mysqlnd
      - php-common
      - php-mbstring
      - php-intl
      - php-xml
      - php-fpm
      - php-json
    state: present
    enablerepo: remi-7.4

# Ensure PHP-FPM service is started and enabled
- name: Ensure PHP-FPM service is started and enabled
  remote_user: ec2-user
  become: true
  ansible.builtin.service:
    name: php-fpm
    state: started
    enabled: true

# Set SELinux boolean for httpd_execmem
- name: Set SELinux boolean for httpd_execmem
  remote_user: ec2-user
  become: true
  ansible.builtin.seboolean:
    name: httpd_execmem
    state: true
    persistent: yes

# Ensure httpd service is started and enabled
- name: Ensure httpd service is started and enabled
  remote_user: ec2-user
  become: true
  ansible.builtin.service:
    name: httpd
    state: started
    enabled: true

# Download the artifact
- name: Download the artifact
  remote_user: ec2-user
  become: true
  ansible.builtin.get_url:
    url: http://44.204.92.144:8082/artifactory/Todo-artifact-local/php-todo.zip
    dest: /home/ec2-user/php-todo.zip
    url_username: admin
    url_password: Admin123$

- name: Ensure unzip is installed
  become: yes
  ansible.builtin.yum:
    name: unzip
    state: present
  when: ansible_os_family == "RedHat"

- name: Unzip the artifacts
  ansible.builtin.unarchive:
    src: /home/ec2-user/php-todo.zip
    dest: /var/www/html/
    remote_src: yes

# Unzip the artifacts
- name: Unzip the artifacts
  ansible.builtin.unarchive:
    src: /home/ec2-user/php-todo.zip
    dest: /home/ec2-user/
    remote_src: yes
  become: true

# Run chown on /var/www/html
- name: Run chown on /var/www/html
  ansible.builtin.command:
    cmd: chown -R $USER:$USER /var/www/html
  become: true

# Deploy the code
- name: Deploy the code
  remote_user: ec2-user
  become: true
  ansible.builtin.copy:
    src: /home/ec2-user/var/lib/jenkins/workspace/php-todo-pipeline/.
    dest: /var/www/html/
    force: yes
    remote_src: yes

# Delete the zip file after unzipping
- name: Delete the zip file after unzipping
  ansible.builtin.file:
    path: /home/ec2-user/php-todo.zip
    state: absent
  become: true

# Delete the unzipped files after copying
- name: Delete the unzipped files after copying
  ansible.builtin.file:
    path: /home/ec2-user/php-todo/
    state: absent
  become: true

# Remove Apache default welcome page on RedHat-based systems
- name: Remove Apache default welcome page
  remote_user: ec2-user
  become: true
  ansible.builtin.file:
    path: /etc/httpd/conf.d/welcome.conf
    state: absent
  when: ansible_os_family == "RedHat"

# Restart httpd
- name: Restart httpd
  remote_user: ec2-user
  become: true
  ansible.builtin.service:
    name: httpd
    state: restarted

# Verify PHP version
- name: Verify PHP version
  remote_user: ec2-user
  become: true
  ansible.builtin.command: php -v
  register: php_version

# Display PHP version
- name: Display PHP version
  remote_user: ec2-user
  become: true
  ansible.builtin.debug:
    msg: "{{ php_version.stdout }}"

